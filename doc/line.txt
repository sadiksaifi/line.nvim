*line.txt*	An opinionated, minimal, and performant Neovim statusline plugin

==============================================================================
INTRODUCTION						*line-introduction*

line.nvim is an opinionated, minimal, and performant Neovim statusline plugin
written in pure Lua. This plugin provides a basic set of essential features
without overwhelming configuration options.

==============================================================================
REQUIREMENTS						*line-requirements*

- Neovim >= 0.11.0

==============================================================================
INSTALLATION						*line-installation*

Using lazy.nvim~

Add this to your `lua/plugins/line.lua`:

```lua
return {
  "sadiksaifi/line.nvim",
  opts = {}, -- or your custom options below
}
```

Note: With lazy.nvim, the `opts` table is automatically passed to the plugin's
`setup()` function.

Using vim.pack (Neovim 0.12+)~

Add this to your `init.lua`:

```lua
vim.pack.add({
  "sadiksaifi/line.nvim"
})

require("line").setup() -- or your custom options
```

==============================================================================
CONFIGURATION						*line-configuration*

The plugin works out of the box with sensible defaults. You can customize it by
passing options to the `setup()` function. All options are fully typed for
LSP/autocomplete support.

```lua
require("line").setup({
    -- Project root detection
    root_markers = {
      ".git", ".vscode", ".editorconfig", "package.json", "deno.json",
      "pyproject.toml", "Cargo.toml", "go.mod", "composer.json", "Gemfile",
    },

    -- LSP configuration
    lsp = {
      ignored_clients = { "null-ls", "eslint" },
    },

    -- Statusline components (enable/disable)
    components = {
      mode = true,         -- Show current mode
      file_path = true,    -- Show file path
      lsp = true,          -- Show LSP status
      diagnostics = true,  -- Show diagnostics
      git = true,          -- Show git branch
    },

    -- Icons (can be overridden)
    icons = {
      error = "󰅚",   -- Error diagnostic icon
      warn  = "󰋽",   -- Warning diagnostic icon
      git   = " ",  -- Git branch icon
    },

    -- Colors (three modes: "inherit", "default", or custom table)
    colors = "inherit", -- or "default" or table with any of these options:
    -- colors = {
    --   statusline = { fg = "#c0caf5", bg = "#303038" },
    --   normal     = { fg = "#24283b", bg = "#a2d2fb" },
    --   insert     = { fg = "#24283b", bg = "#9ece6a" },
    --   visual     = { fg = "#24283b", bg = "#bb9af7" },
    --   replace    = { fg = "#24283b", bg = "#f7768e" },
    --   command    = { fg = "#24283b", bg = "#e0af68" },
    --   select     = { fg = "#24283b", bg = "#7dcfff" },
    --   shell      = { fg = "#24283b", bg = "#7aa2f7" },
    --   terminal   = { fg = "#24283b", bg = "#7aa2f7" },
    --   file       = { fg = "#c0caf5", bg = "#303038" },
    --   diagnostic_error = { fg = "#f7768e", bg = "#303038" },
    --   diagnostic      = { fg = "#e0af68", bg = "#303038" },
    --   lsp        = { fg = "#a2d2fb", bg = "#303038" },
    --   git        = { fg = "#a2d2fb", bg = "#303038" },
    --   extension  = { fg = "#24283b", bg = "#a2d2fb" },
    --   separator  = { fg = "#c0caf5", bg = "#303038" },
    -- },
})
```

Color modes: "inherit" (default) uses your colorscheme, "default" uses fallback
colors, or provide a table to override specific colors. For better editor hints,
you can use the types:

```lua
---@type require('line.types').LineConfig
local config = {
  colors = {
    statusline = { fg = "#ffffff", bg = "#22223b" },
  },
}
require("line").setup(config)
```

Color Modes:~
- "inherit" (default): Uses colors from your current colorscheme
- "default": Uses built-in fallback colors
- Table: Override specific colors while inheriting others from colorscheme

==============================================================================
OPTIONS							*line-options*

root_markers					*line-root_markers*
	List of files/directories to detect the project root.

lsp.ignored_clients				*line-lsp-ignored_clients*
	LSP client names to ignore in the statusline.
	Default: `null-ls`, `eslint`

components						*line-components-options*
	Enable/disable each statusline section. All enabled by default:
	- mode: Show current mode
	- file_path: Show file path
	- lsp: Show LSP status
	- diagnostics: Show diagnostics
	- git: Show git branch

icons							*line-icons*
	Unicode icons for various components:
	- error: Error diagnostic icon
	- warn: Warning diagnostic icon
	- git: Git branch icon

colors							*line-colors*
	Color configuration with three modes:
	- "inherit" (default): Uses colors from your current colorscheme
	- "default": Uses built-in fallback colors
	- Table: Override specific colors while inheriting others from colorscheme
	
	The plugin will use colors from your colorscheme's highlight groups like
	StatusLine, Normal, Visual, DiagnosticError, etc.

==============================================================================
COMPONENTS						*line-components-overview*

Left Side:
- Current mode (using built-in Neovim mode names)
- File path relative to project root

Right Side:
- LSP status (spinner while loading, client names when ready)
- Diagnostic counts with icons (errors/warnings)
- Git branch information

==============================================================================
LICENSE							*line-license*

MIT License

==============================================================================
vim:tw=78:ts=8:ft=help:norl: 